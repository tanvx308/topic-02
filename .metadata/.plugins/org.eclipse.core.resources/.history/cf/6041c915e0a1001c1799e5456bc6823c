package fis.java.minitest.dao;

import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Scanner;
import java.util.Set;
import java.util.stream.Collectors;

import fis.java.minitest.common.CustomException;
import fis.java.minitest.common.Data;
import fis.java.minitest.model.Account;
import fis.java.minitest.util.ValidateUtil;
import fis.java.minitest.util.impl.StringValidateImpl;

public class AccountDAO {
	private static Scanner sc = new Scanner(System.in);

	private static ValidateUtil validateUtil = new StringValidateImpl();

	// hàm nhập thông tin account
	public static Account inputAccount() throws CustomException {
		System.out.print("Nhập tên tài khoản: ");
		String accountName = sc.nextLine();
		if (!validateUtil.isValidate(5, 100, accountName)) {
			throw new CustomException("Tên tài khoản không hợp lệ!");
		}

		System.out.print("Nhập số tài khoản: ");
		String accountNumber = sc.nextLine();
		if (!validateUtil.isValidate(12, 12, accountNumber)) {
			throw new CustomException("Số tài khoản không hợp lệ!");
		}

		return add( new Account(accountName, accountNumber));
	}
	
	//hàm cập nhật thông tin account
	public static Account updateAccount() throws CustomException{
		System.out.print("Nhập Id tài khoản: ");
		try {
			Long id = Long.parseLong(sc.nextLine().trim());
			
			if(!isValidateId(id)) {
				throw new CustomException("Tài khoản chưa tồn tại");
			}
			
			System.out.print("Nhập tên tài khoản mới: ");
			String accountName = sc.nextLine();
			if (!validateUtil.isValidate(5, 100, accountName)) {
				throw new CustomException("Tên tài khoản không hợp lệ!");
			}
			
			System.out.print("Nhập trạng thái mới: ");
			Integer status = Integer.parseInt(sc.nextLine().trim());
		} catch (Exception e) {
			// TODO: handle exception
			throw new CustomException("Không đúng định dạng");
		}
		return null;
	}

	// hàm in danh sách account
	public static String outputAccount() {
		String formatter = "\n%-5S | %-30s | %-30s | %-10S | %-10s";
		StringBuilder sb = new StringBuilder("");
		sb.append(String.format(formatter, "ID", "TEN TAI KHOAN", "SO TAI KHOAN", "SO DU", "TRANG THAI"));
		Data.list.stream()
				.forEach(i -> sb.append(String.format(formatter, String.valueOf(i.getId()), i.getAccountName(),
						i.getAccountNumber(), String.valueOf(i.getBalance()), Data.map.get(i.getStatus()))));
		return sb.toString();
	}

	// sắp xếp danh sách
	public static void sort(Comparator<Account> cmp, List<Account> accounts) {
		Collections.sort(accounts, cmp);
	}

	// thêm tài khoản
	public static Account add(Account account) {
		Data.list.add(account);
		return account;
	}

	// hàm kiểm tra tài khoản có hợp lệ
	public static boolean isValidateId(Long id) {
		Set<Long> set =  Data.list.stream().map(i -> i.getId()).collect(Collectors.toSet());
		return set.contains(id);
	}
}
